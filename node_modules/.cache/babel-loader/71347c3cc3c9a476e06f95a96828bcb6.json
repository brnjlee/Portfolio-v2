{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nvar _class, _temp;\n\nvar _three = require('three');\n\nvar THREE = _interopRequireWildcard(_three);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _warning = require('fbjs/lib/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _Object3DDescriptor2 = require('../Object/Object3DDescriptor');\n\nvar _Object3DDescriptor3 = _interopRequireDefault(_Object3DDescriptor2);\n\nvar _propTypeInstanceOf = require('../../utils/propTypeInstanceOf');\n\nvar _propTypeInstanceOf2 = _interopRequireDefault(_propTypeInstanceOf);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar updateLightTargetFromQuaternion = function () {\n  var lightPositionVector = new THREE.Vector3();\n  var forward = new THREE.Vector3();\n  return function (light) {\n    light.updateMatrixWorld();\n    lightPositionVector.setFromMatrixPosition(light.matrixWorld); // rotate forward to match the rotation\n    // then set the target position\n\n    light.target.position.copy(forward.set(0, 0, 1).applyQuaternion(light.quaternion).add(lightPositionVector));\n    light.target.updateMatrixWorld();\n  };\n}();\n\nvar LightDescriptorBase = (_temp = _class = function (_Object3DDescriptor) {\n  _inherits(LightDescriptorBase, _Object3DDescriptor);\n\n  function LightDescriptorBase(react3Instance) {\n    _classCallCheck(this, LightDescriptorBase);\n\n    var _this = _possibleConstructorReturn(this, (LightDescriptorBase.__proto__ || Object.getPrototypeOf(LightDescriptorBase)).call(this, react3Instance));\n\n    _this.removeProp('receiveShadow');\n\n    _this._hasDirection = false;\n\n    if (process.env.NODE_ENV !== 'production') {\n      _this._warnedAboutLightMaterialUpdate = false;\n    }\n\n    _this.hasProp('updatesRefreshAllMaterials', {\n      type: _propTypes2.default.bool,\n      updateInitial: true,\n      update: function update(threeObject, updatesRefreshAllMaterials) {\n        threeObject.userData._updatesRefreshAllMaterials = updatesRefreshAllMaterials;\n      },\n      default: false\n    });\n\n    _this.hasProp('shadowBias', {\n      type: _propTypes2.default.number,\n      updateInitial: true,\n      update: function update(threeObject, value, hasProp) {\n        if (hasProp) {\n          threeObject.shadow.bias = value;\n        }\n      },\n      default: LightDescriptorBase.defaultShadowBias\n    });\n\n    _this.hasProp('shadowDarkness', {\n      type: _propTypes2.default.number,\n      simple: true,\n      default: 0.5\n    });\n\n    _this.hasProp('shadowMapWidth', {\n      type: _propTypes2.default.number,\n      updateInitial: true,\n      update: function update(threeObject, value, hasProp) {\n        if (hasProp) {\n          threeObject.shadow.mapSize.x = value;\n        }\n      },\n      default: 512\n    });\n\n    _this.hasProp('shadowMapHeight', {\n      type: _propTypes2.default.number,\n      updateInitial: true,\n      update: function update(threeObject, value, hasProp) {\n        if (hasProp) {\n          threeObject.shadow.mapSize.y = value;\n        }\n      },\n      default: 512\n    });\n\n    _this.hasProp('shadowCameraNear', {\n      type: _propTypes2.default.number,\n      updateInitial: true,\n      update: function update(threeObject, value, hasProp) {\n        if (hasProp) {\n          threeObject.shadow.camera.near = value;\n        }\n      },\n      default: LightDescriptorBase.defaultShadowCameraNear\n    });\n\n    _this.hasProp('shadowCameraFar', {\n      type: _propTypes2.default.number,\n      updateInitial: true,\n      update: function update(threeObject, value, hasProp) {\n        if (hasProp) {\n          threeObject.shadow.camera.far = value;\n        }\n      },\n      default: LightDescriptorBase.defaultShadowCameraFar\n    });\n\n    _this.hasProp('castShadow', {\n      override: true,\n      type: _propTypes2.default.bool,\n      update: _this.triggerRemount,\n      default: false\n    });\n\n    return _this;\n  }\n\n  _createClass(LightDescriptorBase, [{\n    key: 'hasDirection',\n    value: function hasDirection() {\n      this._hasDirection = true; // recreate the props to use target\n\n      this.removeProp('position');\n      this.removeProp('rotation');\n      this.removeProp('quaternion');\n      this.removeProp('lookAt');\n      this.removeProp('matrix');\n      this.hasProp('position', {\n        type: (0, _propTypeInstanceOf2.default)(THREE.Vector3),\n        update: function update(threeObject, position) {\n          threeObject.position.copy(position);\n\n          if (threeObject.userData._lookAt) {\n            threeObject.lookAt(threeObject.userData._lookAt);\n          }\n\n          threeObject.userData._needsDirectionUpdate = true;\n        },\n        default: new THREE.Vector3()\n      });\n      this.hasProp('rotation', {\n        type: (0, _propTypeInstanceOf2.default)(THREE.Euler),\n        update: function update(light, rotation) {\n          light.rotation.copy(rotation);\n          light.userData._needsDirectionUpdate = true;\n        },\n        default: new THREE.Euler()\n      });\n      this.hasProp('quaternion', {\n        type: (0, _propTypeInstanceOf2.default)(THREE.Quaternion),\n        update: function update(light, quaternion) {\n          light.quaternion.copy(quaternion);\n          light.userData._needsDirectionUpdate = true;\n        },\n        default: new THREE.Quaternion()\n      });\n      this.hasProp('matrix', {\n        type: (0, _propTypeInstanceOf2.default)(THREE.Matrix4),\n        update: function update(light, matrix) {\n          light.matrix.copy(matrix);\n          light.matrix.decompose(light.position, light.quaternion, light.scale);\n          light.userData._needsDirectionUpdate = true;\n        },\n        default: new THREE.Matrix4()\n      });\n      this.hasProp('lookAt', {\n        type: (0, _propTypeInstanceOf2.default)(THREE.Vector3),\n        update: function update(threeObject, lookAt) {\n          threeObject.userData._lookAt = lookAt;\n\n          if (lookAt) {\n            threeObject.lookAt(lookAt);\n            threeObject.userData._needsDirectionUpdate = true;\n          }\n        },\n        default: undefined\n      });\n    }\n  }, {\n    key: 'completePropertyUpdates',\n    value: function completePropertyUpdates(threeObject) {\n      _get(LightDescriptorBase.prototype.__proto__ || Object.getPrototypeOf(LightDescriptorBase.prototype), 'completePropertyUpdates', this).call(this, threeObject);\n\n      if (threeObject.userData._needsDirectionUpdate) {\n        threeObject.userData._needsDirectionUpdate = false;\n        updateLightTargetFromQuaternion(threeObject);\n      }\n    }\n  }, {\n    key: 'hasColor',\n    value: function hasColor() {\n      var colorType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'color';\n      var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0xffffff;\n      this.hasProp(colorType, {\n        type: _propTypes2.default.oneOfType([(0, _propTypeInstanceOf2.default)(THREE.Color), _propTypes2.default.number, _propTypes2.default.string]),\n        update: function update(threeObject, newColor) {\n          threeObject.color.set(newColor);\n        },\n        default: defaultValue\n      });\n    }\n  }, {\n    key: 'applyInitialProps',\n    value: function applyInitialProps(threeObject, props) {\n      _get(LightDescriptorBase.prototype.__proto__ || Object.getPrototypeOf(LightDescriptorBase.prototype), 'applyInitialProps', this).call(this, threeObject, props);\n\n      if (props.hasOwnProperty('castShadow')) {\n        threeObject.castShadow = props.castShadow;\n      }\n\n      if (this._hasDirection) {\n        threeObject.userData._needsDirectionUpdate = false;\n\n        if (props.position || props.lookAt || props.rotation || props.quaternion) {\n          updateLightTargetFromQuaternion(threeObject);\n        }\n      }\n    }\n  }, {\n    key: 'unmount',\n    value: function unmount(threeObject) {\n      this.updateAllMaterials(threeObject);\n\n      _get(LightDescriptorBase.prototype.__proto__ || Object.getPrototypeOf(LightDescriptorBase.prototype), 'unmount', this).call(this, threeObject);\n    }\n  }, {\n    key: 'setParent',\n    value: function setParent(threeObject, parentObject3d) {\n      _get(LightDescriptorBase.prototype.__proto__ || Object.getPrototypeOf(LightDescriptorBase.prototype), 'setParent', this).call(this, threeObject, parentObject3d);\n\n      this.updateAllMaterials(threeObject);\n    }\n  }, {\n    key: 'updateAllMaterials',\n    value: function updateAllMaterials(threeObject) {\n      var rootInstance = threeObject.userData.markup._rootInstance;\n\n      if (rootInstance && !rootInstance._willUnmount) {\n        if (process.env.NODE_ENV !== 'production') {\n          if (!this._warnedAboutLightMaterialUpdate && !threeObject.userData._updatesRefreshAllMaterials) {\n            var owner = threeObject.userData.react3internalComponent._currentElement._owner;\n            var elementType = threeObject.userData.react3internalComponent._elementType;\n            (0, _warning2.default)(this._warnedAboutLightMaterialUpdate, LightDescriptorBase.getDynamicWarningMessage(elementType, owner));\n            this._warnedAboutLightMaterialUpdate = true;\n          }\n        }\n\n        rootInstance.allMaterialsNeedUpdate();\n      }\n    }\n  }]);\n\n  return LightDescriptorBase;\n}(_Object3DDescriptor3.default), _class.defaultShadowCameraNear = 0.5, _class.defaultShadowCameraFar = 500, _class.defaultShadowBias = 0, _temp);\n\nif (process.env.NODE_ENV !== 'production') {\n  LightDescriptorBase.getDynamicWarningMessage = function (elementType, owner) {\n    return '<' + elementType + '/> has been updated which triggered a refresh of all materials.\\nThis is a potentially expensive operation.\\nThis can happen when you add or remove a light, or add or remove any component\\nbefore any lights without keys e.g.\\n<object3d>\\n  {/* new or removed component here */}\\n  <ambientLight/>\\n</object3d>, or update some properties of lights.\\n\\nIf you would like to add components, you should either add the components\\nafter the lights (recommended), e.g.\\n<object3d>\\n  <ambientLight/>\\n  {/* new or removed component here */}\\n</object3d>, or add a \\'key\\' property to the lights e.g.\\n<object3d>\\n  {/* new or removed component here */}\\n  <ambientLight key=\"light\"/>\\n</object3d>.\\n\\nIf you have modified a light\\'s properties e.g. toggled castShadow,\\nthe materials need to be rebuilt as well.\\n\\nTo acknowledge and remove this message, please add the property \\'updatesRefreshAllMaterials\\'\\n  to <' + elementType + '/> inside the render() of ' + (owner && owner.getName() || 'a component') + '.\\n\\nFor more information, visit https://github.com/mrdoob/threejs/wiki/Updates .';\n  };\n}\n\nmodule.exports = LightDescriptorBase;","map":null,"metadata":{},"sourceType":"script"}