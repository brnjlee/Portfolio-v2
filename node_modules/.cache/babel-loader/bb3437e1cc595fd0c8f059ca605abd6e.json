{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nvar _three = require('three');\n\nvar THREE = _interopRequireWildcard(_three);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _invariant = require('fbjs/lib/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _GeometryDescriptorBase = require('./GeometryDescriptorBase');\n\nvar _GeometryDescriptorBase2 = _interopRequireDefault(_GeometryDescriptorBase);\n\nvar _ShapeResourceReference = require('../../Resources/ShapeResourceReference');\n\nvar _ShapeResourceReference2 = _interopRequireDefault(_ShapeResourceReference);\n\nvar _propTypeInstanceOf = require('../../utils/propTypeInstanceOf');\n\nvar _propTypeInstanceOf2 = _interopRequireDefault(_propTypeInstanceOf);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar GeometryWithShapesDescriptor = function (_GeometryDescriptorBa) {\n  _inherits(GeometryWithShapesDescriptor, _GeometryDescriptorBa);\n\n  function GeometryWithShapesDescriptor(react3RendererInstance) {\n    _classCallCheck(this, GeometryWithShapesDescriptor);\n\n    var _this = _possibleConstructorReturn(this, (GeometryWithShapesDescriptor.__proto__ || Object.getPrototypeOf(GeometryWithShapesDescriptor)).call(this, react3RendererInstance));\n\n    _this._invalidChild = function (child) {\n      return !(child instanceof THREE.Shape || child instanceof _ShapeResourceReference2.default);\n    };\n\n    _this.hasProp('shapes', {\n      type: _propTypes2.default.arrayOf((0, _propTypeInstanceOf2.default)(THREE.Shape)),\n      updateInitial: true,\n      update: function update(threeObject, shapes) {\n        threeObject.userData._shapesFromProps = shapes || [];\n        threeObject.userData._needsToRefreshGeometry = true;\n      },\n      default: []\n    });\n\n    var optionNames = ['curveSegments'];\n    var optionTypes = [_propTypes2.default.number, _propTypes2.default.number, _propTypes2.default.shape({\n      generateTopUV: _propTypes2.default.func,\n      generateSideWallUV: _propTypes2.default.func\n    })];\n    optionNames.forEach(function (propName, i) {\n      _this.hasProp(propName, {\n        type: optionTypes[i],\n        update: function update(threeObject, value) {\n          if (value === undefined) {\n            delete threeObject.userData._options[propName];\n          } else {\n            threeObject.userData._options[propName] = value;\n          }\n\n          threeObject.userData._needsToRefreshGeometry = true;\n        },\n        default: undefined\n      });\n    });\n    return _this;\n  }\n\n  _createClass(GeometryWithShapesDescriptor, [{\n    key: 'completePropertyUpdates',\n    value: function completePropertyUpdates(threeObject) {\n      if (threeObject.userData._needsToRefreshGeometry) {\n        this.refreshGeometry(threeObject);\n        threeObject.userData._needsToRefreshGeometry = false;\n      }\n    }\n  }, {\n    key: 'construct',\n    value: function construct() {\n      return new THREE.BufferGeometry();\n    }\n  }, {\n    key: 'getOptions',\n    value: function getOptions(props) {\n      var options = {};\n      ['curveSegments'].forEach(function (propName) {\n        if (props.hasOwnProperty(propName)) {\n          options[propName] = props[propName];\n        }\n      });\n      return options;\n    }\n  }, {\n    key: 'applyInitialProps',\n    value: function applyInitialProps(threeObject, props) {\n      _get(GeometryWithShapesDescriptor.prototype.__proto__ || Object.getPrototypeOf(GeometryWithShapesDescriptor.prototype), 'applyInitialProps', this).call(this, threeObject, props);\n\n      threeObject.userData._shapeCache = [];\n      threeObject.userData._options = this.getOptions(props);\n      threeObject.userData._resourceListenerCleanupFunctions = [];\n      threeObject.userData._needsToRefreshGeometry = false;\n\n      if (!props.children) {\n        // will use shapes only from props\n        this.refreshGeometry(threeObject);\n      }\n    }\n  }, {\n    key: 'addChildren',\n    value: function addChildren(threeObject, children) {\n      var _this2 = this;\n\n      if (process.env.NODE_ENV !== 'production') {\n        (0, _invariant2.default)(children.filter(this._invalidChild).length === 0, 'shape-based geometry children' + ' can only be shapes!');\n      } else {\n        (0, _invariant2.default)(children.filter(this._invalidChild).length === 0, false);\n      }\n\n      var shapeCache = [];\n      children.forEach(function (child) {\n        if (child instanceof _ShapeResourceReference2.default) {\n          var shapeIndex = shapeCache.length;\n\n          var resourceListener = function resourceListener(shape) {\n            threeObject.userData._shapeCache[shapeIndex] = shape;\n\n            _this2.refreshGeometry(threeObject);\n          };\n\n          resourceListener.target = child;\n\n          var cleanupFunction = function cleanupFunction() {\n            child.userData.events.removeListener('resource.set', resourceListener);\n\n            threeObject.userData._resourceListenerCleanupFunctions.splice(threeObject.userData._resourceListenerCleanupFunctions.indexOf(cleanupFunction), 1);\n          };\n\n          threeObject.userData._resourceListenerCleanupFunctions.push(cleanupFunction);\n\n          child.userData.events.on('resource.set', resourceListener);\n          child.userData.events.once('dispose', function () {\n            cleanupFunction();\n          });\n          shapeCache.push(null);\n        } else {\n          shapeCache.push(child);\n        }\n      });\n      threeObject.userData._shapeCache = shapeCache;\n      this.refreshGeometry(threeObject);\n    }\n  }, {\n    key: 'addChild',\n    value: function addChild(threeObject) {\n      // new shape was added\n      // TODO optimize\n      this.triggerRemount(threeObject);\n    }\n  }, {\n    key: 'moveChild',\n    value: function moveChild(threeObject) {\n      // a shape was moved\n      // TODO optimize\n      this.triggerRemount(threeObject);\n    }\n  }, {\n    key: 'removeChild',\n    value: function removeChild(threeObject) {\n      // shape was removed\n      // TODO optimize\n      this.triggerRemount(threeObject);\n    }\n  }, {\n    key: 'unmount',\n    value: function unmount(geometry) {\n      geometry.userData._resourceListenerCleanupFunctions.forEach(function (listener) {\n        listener();\n      });\n\n      delete geometry.userData._options;\n      delete geometry.userData._resourceListenerCleanupFunctions;\n      delete geometry.userData._shapesFromProps;\n      return _get(GeometryWithShapesDescriptor.prototype.__proto__ || Object.getPrototypeOf(GeometryWithShapesDescriptor.prototype), 'unmount', this).call(this, geometry);\n    }\n  }]);\n\n  return GeometryWithShapesDescriptor;\n}(_GeometryDescriptorBase2.default);\n\nmodule.exports = GeometryWithShapesDescriptor;","map":null,"metadata":{},"sourceType":"script"}