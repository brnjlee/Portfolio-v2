{"ast":null,"code":"'use strict';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _invariant = require('fbjs/lib/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _warning = require('fbjs/lib/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _events = require('events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _checkReactTypeSpec = require('react/lib/checkReactTypeSpec');\n\nvar _checkReactTypeSpec2 = _interopRequireDefault(_checkReactTypeSpec);\n\nvar _React3Instance = require('../React3Instance');\n\nvar _React3Instance2 = _interopRequireDefault(_React3Instance);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar EventEmitter = _events2.default.EventEmitter;\n/**\r\n * @abstract\r\n */\n\nvar THREEElementDescriptor = function () {\n  function THREEElementDescriptor(react3RendererInstance) {\n    _classCallCheck(this, THREEElementDescriptor);\n\n    this.react3RendererInstance = react3RendererInstance;\n    this.propUpdates = {};\n    this.propDeletes = {};\n    this.propDefaults = {};\n    this._initialOnly = {};\n    this._updateInitial = [];\n    this._simpleProperties = [];\n    this.propTypes = {};\n    this._hasName = false;\n  }\n\n  _createClass(THREEElementDescriptor, [{\n    key: 'hasEvent',\n    value: function hasEvent(name) {\n      this._hasEvents = true;\n      this.hasProp(name, {\n        type: _propTypes2.default.func,\n        updateInitial: true,\n        update: function update(threeObject, callback) {\n          threeObject.userData._eventCallbacks[name] = callback;\n        },\n        default: null\n      });\n    }\n  }, {\n    key: 'removeProp',\n    value: function removeProp(name) {\n      (0, _invariant2.default)(this.propTypes.hasOwnProperty(name), 'The property %s has not been defined', name);\n\n      var simpleIndex = this._simpleProperties.indexOf(name);\n\n      if (simpleIndex !== -1) {\n        this._simpleProperties.splice(simpleIndex, 1);\n      }\n\n      delete this.propTypes[name];\n      delete this.propDeletes[name];\n      delete this.propUpdates[name];\n      delete this.propDefaults[name];\n\n      var updateInitialIndex = this._updateInitial.indexOf(name);\n\n      if (updateInitialIndex !== -1) {\n        this._updateInitial.splice(updateInitialIndex, 1);\n      }\n\n      delete this._initialOnly[name];\n    }\n  }, {\n    key: 'hasProp',\n    value: function hasProp(name, info) {\n      var _this = this;\n\n      (0, _invariant2.default)(info.hasOwnProperty('type'), 'The information should include a `type` property');\n      (0, _invariant2.default)(!this.propTypes.hasOwnProperty(name) || info.override, 'The property %s has already been defined', name);\n\n      if (info.override) {\n        // clean up simple prop\n        var simpleIndex = this._simpleProperties.indexOf(name);\n\n        if (simpleIndex !== -1) {\n          this._simpleProperties.splice(simpleIndex, 1);\n        }\n      }\n\n      this.propTypes[name] = info.type;\n\n      if (info.hasOwnProperty('simple')) {\n        this.registerSimpleProperties([name]);\n\n        if (info.hasOwnProperty('default')) {\n          this.propDeletes[name] = function (threeObject) {\n            _this.propUpdates[name](threeObject, info.default, true);\n          };\n\n          this.propDefaults[name] = info.default;\n        }\n      } else {\n        if (info.hasOwnProperty('update')) {\n          this.propUpdates[name] = info.update;\n        }\n\n        if (info.hasOwnProperty('default')) {\n          (0, _invariant2.default)(info.hasOwnProperty('update'), 'The information should include a `update` property ' + 'if it has a `default` property');\n\n          this.propDeletes[name] = function (threeObject) {\n            info.update(threeObject, info.default, true);\n          };\n\n          this.propDefaults[name] = info.default;\n        } else {\n          (0, _invariant2.default)(info.update === this.triggerRemount, 'The type information for ' + this.constructor.name + '.' + name + ' ' + 'should include a `default` property if it\\'s not going to trigger remount');\n        }\n\n        if (info.hasOwnProperty('remove')) {\n          (0, _invariant2.default)(false, 'Bad \\'remove\\' info for ' + this.constructor.name + '.' + name);\n        }\n\n        if (info.hasOwnProperty('updateInitial')) {\n          (0, _invariant2.default)(info.hasOwnProperty('update'), 'The information should include a ' + '`update` property if it has a`updateInitial` property');\n\n          if (process.env.NODE_ENV !== 'production') {\n            (0, _invariant2.default)(info.hasOwnProperty('default') || this.propUpdates[name].length === 3 || this.propUpdates[name] === this.triggerRemount, 'Prop info for ' + this.constructor.name + '.' + name + ' has \\'updateInitial\\', ' + 'but no \\'default\\', and ' + ('the update function accepts ' + this.propUpdates[name].length) + ' parameters instead of 3.');\n          }\n\n          if (this._updateInitial.indexOf(name) === -1) {\n            this._updateInitial.push(name);\n          }\n        }\n\n        if (info.initialOnly) {\n          (0, _invariant2.default)(info.hasOwnProperty('updateInitial'), 'The information should include a ' + '`updateInitial` property if it has an `initialOnly` property');\n        }\n\n        this._initialOnly[name] = info.initialOnly;\n      }\n    }\n  }, {\n    key: 'hasName',\n    value: function hasName() {\n      var _this2 = this;\n\n      this._hasName = true;\n      this.hasProp('name', {\n        type: _propTypes2.default.string,\n        update: function update(threeObject, name) {\n          _this2._updateName(threeObject, name);\n        },\n        default: ''\n      });\n    }\n  }, {\n    key: '_updateName',\n    value: function _updateName(threeObject, nextName) {\n      var oldName = threeObject.name;\n      threeObject.name = nextName;\n      threeObject.userData.events.emit('rename', {\n        oldName: oldName,\n        nextName: nextName\n      });\n      var markup = threeObject.userData.markup;\n\n      if (markup._rootInstance) {\n        markup._rootInstance.objectRenamed(threeObject, oldName, nextName);\n      }\n    }\n  }, {\n    key: 'placeRemountTrigger',\n    value: function placeRemountTrigger(threeObject, triggerRemount) {\n      threeObject.userData._triggerRemount = triggerRemount;\n    }\n  }, {\n    key: 'applyInitialProps',\n    value: function applyInitialProps(threeObject, props) {\n      var _this3 = this; // do nothing for now\n\n\n      var eventsForObject = new EventEmitter();\n\n      if (this._hasName && props.name) {\n        threeObject.name = props.name;\n      }\n\n      if (this._hasEvents) {\n        threeObject.userData._eventCallbacks = {};\n      } // pass down resources\n\n\n      eventsForObject.on('resource.added', function (data) {\n        var childrenMarkup = threeObject.userData.markup.childrenMarkup;\n\n        var increasedDistance = _extends({}, data, {\n          distance: data.distance + 1\n        });\n\n        childrenMarkup.forEach(function (childMarkup) {\n          return childMarkup.threeObject.userData.events.emit('resource.added', increasedDistance);\n        });\n      });\n      eventsForObject.on('resource.removed', function (data) {\n        var childrenMarkup = threeObject.userData.markup.childrenMarkup;\n\n        var increasedDistance = _extends({}, data, {\n          distance: data.distance + 1\n        });\n\n        childrenMarkup.forEach(function (childMarkup) {\n          return childMarkup.threeObject.userData.events.emit('resource.removed', increasedDistance);\n        });\n      });\n      threeObject.userData.events = eventsForObject;\n      threeObject.userData._descriptor = this;\n\n      this._updateInitial.forEach(function (propertyName) {\n        if (props.hasOwnProperty(propertyName)) {\n          _this3.propUpdates[propertyName](threeObject, props[propertyName], true);\n        } else {\n          var originalValue = void 0;\n\n          if (_this3.propDefaults.hasOwnProperty(propertyName)) {\n            originalValue = _this3.propDefaults[propertyName];\n          }\n\n          _this3.propUpdates[propertyName](threeObject, originalValue, false);\n        }\n      });\n\n      this._simpleProperties.forEach(function (propertyName) {\n        if (props.hasOwnProperty(propertyName)) {\n          threeObject[propertyName] = props[propertyName];\n        }\n      });\n    }\n  }, {\n    key: 'construct',\n    value: function construct(props) {\n      // eslint-disable-line no-unused-vars\n      (0, _invariant2.default)(false, 'Missing constructor!');\n    } // noinspection JSUnusedLocalSymbols\n\n  }, {\n    key: 'addChildren',\n    value: function addChildren(threeObject, children) {\n      // eslint-disable-line no-unused-vars\n      (0, _invariant2.default)(false, 'Cannot add children to ' + this.constructor.name + '!');\n    } // noinspection JSUnusedLocalSymbols\n\n  }, {\n    key: 'addChild',\n    value: function addChild(threeObject, child, mountIndex) {\n      // eslint-disable-line no-unused-vars\n      (0, _invariant2.default)(false, 'Cannot add child to ' + this.constructor.name + '!');\n    }\n  }, {\n    key: 'moveChild',\n    value: function moveChild() {\n      (0, _invariant2.default)(false, 'Cannot move children in ' + this.constructor.name + '!');\n    }\n  }, {\n    key: 'removeChild',\n    value: function removeChild(threeObject, child) {\n      // eslint-disable-line no-unused-vars\n      (0, _invariant2.default)(false, 'Cannot remove children in ' + this.constructor.name + '!');\n    }\n  }, {\n    key: 'setParent',\n    value: function setParent(threeObject, parentObject3D) {\n      var parentMarkup = parentObject3D.userData.markup;\n\n      if (parentMarkup && parentMarkup._rootInstance) {\n        parentMarkup._rootInstance.objectMounted(threeObject);\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount(threeObject) {// eslint-disable-line no-unused-vars\n    }\n  }, {\n    key: 'unmount',\n    value: function unmount(threeObject) {\n      var markup = threeObject.userData.markup;\n\n      if (markup._rootInstance) {\n        markup._rootInstance.objectRemoved(threeObject);\n      }\n\n      if (this._hasEvents) {\n        delete threeObject.userData._eventCallbacks;\n      }\n\n      threeObject.userData.events.emit('dispose', {\n        object: threeObject\n      });\n      threeObject.userData.events.removeAllListeners();\n    }\n  }, {\n    key: 'removedFromParent',\n    value: function removedFromParent(threeObject) {\n      delete threeObject.userData.events;\n    } // noinspection JSUnusedLocalSymbols\n\n  }, {\n    key: 'deleteProperty',\n    value: function deleteProperty(threeObject, propKey) {\n      // eslint-disable-line no-unused-vars\n      if (this.propDeletes[propKey]) {\n        this.propDeletes[propKey](threeObject);\n      } else if (process.env.NODE_ENV !== 'production') {\n        (0, _warning2.default)(false, 'Cannot delete property %s from ' + this.constructor.name, propKey);\n      }\n    }\n  }, {\n    key: 'updateProperty',\n    value: function updateProperty(threeObject, propKey, nextProp) {\n      if (!this._initialOnly[propKey]) {\n        if (this.propUpdates[propKey]) {\n          this.propUpdates[propKey](threeObject, nextProp, true);\n        } else {\n          (0, _warning2.default)(false, 'updating prop ' + propKey + ' ( ' + nextProp + ' ) for ' + this.constructor.name);\n          this.triggerRemount(threeObject);\n        }\n      } else {\n        this.triggerRemount(threeObject);\n      }\n    }\n  }, {\n    key: 'highlight',\n    value: function highlight(threeObject) {// eslint-disable-line no-unused-vars\n      // no highlighting by default!\n    }\n  }, {\n    key: 'hideHighlight',\n    value: function hideHighlight(threeObject) {} // eslint-disable-line no-unused-vars\n    // no highlighting by default!\n\n    /**\r\n     * @protected\r\n     * @param names\r\n     */\n\n  }, {\n    key: 'useSimpleUpdates',\n    value: function useSimpleUpdates(names) {\n      for (var index = 0; index < names.length; ++index) {\n        var propName = names[index];\n        this.propUpdates[propName] = this._updateSimple.bind(this, propName);\n      }\n    }\n  }, {\n    key: '_updateSimple',\n    value: function _updateSimple(propName, threeObject, propValue) {\n      threeObject[propName] = propValue;\n    }\n  }, {\n    key: 'registerSimpleProperties',\n    value: function registerSimpleProperties(propertyNames) {\n      var _this4 = this;\n\n      propertyNames.forEach(function (propName) {\n        if (_this4._simpleProperties.indexOf(propName) === -1) {\n          _this4._simpleProperties.push(propName);\n        }\n      });\n      this.useSimpleUpdates(propertyNames);\n    }\n  }, {\n    key: 'getBoundingBoxes',\n    value: function getBoundingBoxes(threeObject) {\n      // eslint-disable-line no-unused-vars\n      return [];\n    }\n  }, {\n    key: 'triggerRemount',\n    value: function triggerRemount(threeObject) {\n      if (threeObject.userData._triggerRemount) {\n        threeObject.userData._triggerRemount();\n\n        delete threeObject.userData._triggerRemount;\n      }\n    }\n  }, {\n    key: 'beginPropertyUpdates',\n    value: function beginPropertyUpdates(threeObject) {// eslint-disable-line no-unused-vars\n    }\n  }, {\n    key: 'completePropertyUpdates',\n    value: function completePropertyUpdates(threeObject) {// eslint-disable-line no-unused-vars\n    }\n  }, {\n    key: 'beginChildUpdates',\n    value: function beginChildUpdates(threeObject) {// eslint-disable-line no-unused-vars\n    }\n  }, {\n    key: 'completeChildUpdates',\n    value: function completeChildUpdates(threeObject) {// eslint-disable-line no-unused-vars\n    }\n  }]);\n\n  return THREEElementDescriptor;\n}();\n\nif (process.env.NODE_ENV !== 'production') {\n  // @see ReactElementValidator\n  var loggedTypeFailures = {};\n\n  var getDeclarationErrorAddendum = function getDeclarationErrorAddendum(owner) {\n    if (owner) {\n      var name = owner.getName();\n\n      if (name) {\n        return ' Check the render method of `' + name + '`.';\n      }\n    }\n\n    return '';\n  };\n  /**\r\n   * Assert that the props are valid\r\n   * @private\r\n   */\n\n\n  var _checkPropTypes = function _checkPropTypes(componentName, propTypes, props, location, owner, element, debugID) {\n    var propNames = Object.keys(props);\n\n    for (var i = 0; i < propNames.length; ++i) {\n      var propName = propNames[i];\n\n      if (propName === 'children') {\n        continue;\n      }\n\n      if (!propTypes.hasOwnProperty(propName)) {\n        var errorMessage = 'Foreign prop ' + propName + ' found in ' + componentName + '.';\n\n        if (!(errorMessage in loggedTypeFailures)) {\n          var addendum = getDeclarationErrorAddendum(owner); // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n\n          loggedTypeFailures[errorMessage] = true;\n          (0, _warning2.default)(false, '' + errorMessage + addendum);\n        }\n      }\n    }\n\n    (0, _checkReactTypeSpec2.default)(propTypes, props, location, componentName, element, debugID);\n  };\n\n  THREEElementDescriptor.prototype.checkPropTypes = function checkPropTypes(element, owner, debugID, props) {\n    _checkPropTypes(element.type, this.propTypes, props, 'prop', owner, element, debugID);\n  };\n}\n\nmodule.exports = THREEElementDescriptor;","map":null,"metadata":{},"sourceType":"script"}