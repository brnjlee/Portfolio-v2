{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nvar _invariant = require('fbjs/lib/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _THREEElementDescriptor = require('../THREEElementDescriptor');\n\nvar _THREEElementDescriptor2 = _interopRequireDefault(_THREEElementDescriptor);\n\nvar _ResourceReference = require('../../Resources/ResourceReference');\n\nvar _ResourceReference2 = _interopRequireDefault(_ResourceReference);\n\nvar _React3Renderer = require('../../React3Renderer');\n\nvar _React3Renderer2 = _interopRequireDefault(_React3Renderer);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar ResourceDescriptorBase = function (_THREEElementDescript) {\n  _inherits(ResourceDescriptorBase, _THREEElementDescript);\n\n  function ResourceDescriptorBase(react3RendererInstance) {\n    _classCallCheck(this, ResourceDescriptorBase);\n\n    var _this = _possibleConstructorReturn(this, (ResourceDescriptorBase.__proto__ || Object.getPrototypeOf(ResourceDescriptorBase)).call(this, react3RendererInstance));\n\n    _this._addedIntoRoot = function (threeObject) {\n      var currentParentMarkup = threeObject.userData.markup.parentMarkup;\n      var distance = 0;\n\n      while (currentParentMarkup) {\n        var parentResources = currentParentMarkup.threeObject.userData._resources;\n\n        if (parentResources) {\n          var resourceId = threeObject.resourceId;\n          var resourceInParent = parentResources.resourceMap[resourceId];\n\n          if (resourceInParent) {\n            _this._addResource(threeObject, {\n              id: resourceId,\n              distance: distance,\n              resource: resourceInParent\n            });\n          }\n        }\n\n        distance++;\n        currentParentMarkup = currentParentMarkup.threeObject.userData.markup.parentMarkup;\n      }\n\n      _this._updateResource(threeObject);\n    };\n\n    _this.hasProp('resourceId', {\n      type: _propTypes2.default.string.isRequired,\n      update: _this.triggerRemount,\n      default: ''\n    });\n\n    return _this;\n  }\n\n  _createClass(ResourceDescriptorBase, [{\n    key: 'construct',\n    value: function construct(props) {\n      (0, _invariant2.default)(props.hasOwnProperty('resourceId'), 'A resource type must have a property named \"resourceId\"!');\n      return new _ResourceReference2.default(props.resourceId);\n    }\n  }, {\n    key: 'applyInitialProps',\n    value: function applyInitialProps(threeObject, props) {\n      _get(ResourceDescriptorBase.prototype.__proto__ || Object.getPrototypeOf(ResourceDescriptorBase.prototype), 'applyInitialProps', this).call(this, threeObject, props);\n\n      threeObject.userData.resourceMap = [];\n      threeObject.userData._eventCleanupQueue = [];\n      threeObject.userData._chosenResource = undefined;\n      threeObject.userData._debug = props.debug || false;\n      threeObject.userData.events.once('addedIntoRoot', this._addedIntoRoot);\n    }\n  }, {\n    key: 'unmount',\n    value: function unmount(threeObject) {\n      threeObject.userData._eventCleanupQueue.forEach(function (cleanup) {\n        cleanup();\n      });\n\n      delete threeObject.userData._eventCleanupQueue;\n      delete threeObject.userData.resourceMap;\n      this.updateChosenResource(threeObject, null);\n\n      _get(ResourceDescriptorBase.prototype.__proto__ || Object.getPrototypeOf(ResourceDescriptorBase.prototype), 'unmount', this).call(this, threeObject);\n    }\n  }, {\n    key: 'updateChosenResource',\n    value: function updateChosenResource(threeObject, chosenResource) {\n      var oldResource = threeObject.userData._chosenResource;\n\n      if (oldResource !== chosenResource) {\n        threeObject.userData._chosenResource = chosenResource;\n        this.resourceUpdated(threeObject, chosenResource, oldResource);\n      }\n    }\n  }, {\n    key: 'setParent',\n    value: function setParent(threeObject, parentObject3D) {\n      var existingValueInSlot = parentObject3D[threeObject.userData._propertySlot];\n      (0, _invariant2.default)(existingValueInSlot === undefined || existingValueInSlot === null, 'Parent already has a ' + threeObject.userData._propertySlot + ' defined');\n      (0, _invariant2.default)(threeObject.userData._eventCleanupQueue.length === 0, 'Changing parents?');\n\n      _get(ResourceDescriptorBase.prototype.__proto__ || Object.getPrototypeOf(ResourceDescriptorBase.prototype), 'setParent', this).call(this, threeObject, parentObject3D);\n\n      var currentParentMarkup = parentObject3D.userData.markup;\n\n      var onResourceAdded = this._onResourceAdded.bind(this, threeObject);\n\n      var onResourceRemoved = this._onResourceRemoved.bind(this, threeObject);\n\n      var parentEvents = currentParentMarkup.threeObject.userData.events;\n      parentEvents.on('resource.added', onResourceAdded);\n      parentEvents.on('resource.removed', onResourceRemoved);\n\n      threeObject.userData._eventCleanupQueue.push(function () {\n        parentEvents.removeListener('resource.added', onResourceAdded);\n        parentEvents.removeListener('resource.removed', onResourceRemoved);\n      });\n    }\n  }, {\n    key: '_onResourceAdded',\n    value: function _onResourceAdded(threeObject, resourceInfo) {\n      if (threeObject.resourceId !== resourceInfo.id) {\n        return;\n      }\n\n      this._addResource(threeObject, resourceInfo);\n\n      this._updateResource(threeObject);\n    }\n  }, {\n    key: '_addResource',\n    value: function _addResource(threeObject, resourceInfo) {\n      var resourceMap = threeObject.userData.resourceMap;\n      var i = void 0;\n\n      for (i = 0; i < resourceMap.length; ++i) {\n        if (resourceMap[i].distance === resourceInfo.distance) {\n          if (resourceMap[i].resource !== resourceInfo.resource) {\n            resourceMap[i].resource = resourceInfo.resource;\n          }\n\n          return;\n        }\n\n        if (resourceMap[i].distance > resourceInfo.distance) {\n          break;\n        }\n      }\n\n      resourceMap.splice(i, 0, {\n        distance: resourceInfo.distance,\n        resource: resourceInfo.resource\n      });\n    }\n  }, {\n    key: '_onResourceRemoved',\n    value: function _onResourceRemoved(threeObject, resourceInfo) {\n      if (threeObject.resourceId !== resourceInfo.id) {\n        return;\n      }\n\n      var resourceMap = threeObject.userData.resourceMap;\n\n      for (var i = 0; i < resourceMap.length; ++i) {\n        if (resourceMap[i].distance === resourceInfo.distance) {\n          if (resourceMap[i].resource === resourceInfo.resource) {\n            resourceMap.splice(i, 1);\n\n            this._updateResource(threeObject);\n          }\n\n          return;\n        }\n      }\n\n      (0, _invariant2.default)(false, 'This resource was not in this map?');\n    }\n  }, {\n    key: 'applyToSlot',\n    value: function applyToSlot(threeObject, parentObject, newResource) {\n      var propertySlot = threeObject.userData._propertySlot;\n      parentObject[propertySlot] = newResource;\n    }\n  }, {\n    key: 'resourceUpdated',\n    value: function resourceUpdated(threeObject, newResource, oldResource) {\n      var parentObject = threeObject.userData.markup.parentMarkup && threeObject.userData.markup.parentMarkup.threeObject || undefined;\n\n      if (parentObject) {\n        this.applyToSlot(threeObject, parentObject, newResource);\n\n        if (newResource === null) {// invariant(false, 'Could not find resource named ' + threeObject.resourceId);\n        } else {\n          newResource.userData._references.push(parentObject);\n        }\n\n        if (oldResource) {\n          var removalIndex = oldResource.userData._references.indexOf(parentObject);\n\n          (0, _invariant2.default)(removalIndex !== -1, 'Bad reference count for resource');\n\n          oldResource.userData._references.splice(removalIndex, 1);\n        }\n      }\n    }\n  }, {\n    key: '_updateResource',\n    value: function _updateResource(threeObject) {\n      var resourceMap = threeObject.userData.resourceMap;\n      var chosenResource = null;\n\n      if (resourceMap.length > 0) {\n        chosenResource = resourceMap[0].resource;\n      }\n\n      this.updateChosenResource(threeObject, chosenResource);\n    }\n  }, {\n    key: 'highlight',\n    value: function highlight(threeObject) {\n      var ownerObject = threeObject.userData.markup.parentMarkup.threeObject;\n\n      ownerObject.userData._descriptor.highlight(ownerObject);\n    }\n  }, {\n    key: 'hideHighlight',\n    value: function hideHighlight(threeObject) {\n      var ownerObject = threeObject.userData.markup.parentMarkup.threeObject;\n\n      ownerObject.userData._descriptor.hideHighlight(ownerObject);\n    }\n  }]);\n\n  return ResourceDescriptorBase;\n}(_THREEElementDescriptor2.default);\n\nmodule.exports = ResourceDescriptorBase;","map":null,"metadata":{},"sourceType":"script"}