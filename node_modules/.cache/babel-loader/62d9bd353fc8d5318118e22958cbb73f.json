{"ast":null,"code":"'use strict';\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _ReactPropTypeLocationNames = require('react/lib/ReactPropTypeLocationNames');\n\nvar _ReactPropTypeLocationNames2 = _interopRequireDefault(_ReactPropTypeLocationNames);\n\nvar _PropTypeError = require('./PropTypeError');\n\nvar _PropTypeError2 = _interopRequireDefault(_PropTypeError);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar ANONYMOUS = '<<anonymous>>'; // Returns class name of the object, if any.\n\nfunction getClassName(propValue) {\n  if (!(propValue.constructor && (propValue.constructor.name || propValue.constructor.displayName))) {\n    return ANONYMOUS;\n  }\n\n  return propValue.constructor.name || propValue.constructor.displayName;\n}\n\nfunction createChainableTypeChecker(validate) {\n  function checkType(isRequired, props, propName, _componentName, location, _propFullName) {\n    var componentName = _componentName || ANONYMOUS;\n    var propFullName = _propFullName || propName;\n\n    if (props[propName] === undefined) {\n      var locationName = _ReactPropTypeLocationNames2.default[location];\n\n      if (isRequired) {\n        return new _PropTypeError2.default('The ' + locationName + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));\n      }\n\n      return null;\n    }\n\n    for (var _len = arguments.length, rest = Array(_len > 6 ? _len - 6 : 0), _key = 6; _key < _len; _key++) {\n      rest[_key - 6] = arguments[_key];\n    }\n\n    return validate.apply(undefined, [props, propName, componentName, location, propFullName].concat(rest));\n  }\n\n  var chainedCheckType = checkType.bind(null, false);\n  chainedCheckType.isRequired = checkType.bind(null, true);\n  return chainedCheckType;\n}\n\nfunction createInstanceTypeChecker(expectedClass) {\n  var originalInstanceOf = _propTypes2.default.instanceOf(expectedClass);\n\n  function validate(props, propName, componentName, location, propFullName) {\n    for (var _len2 = arguments.length, rest = Array(_len2 > 5 ? _len2 - 5 : 0), _key2 = 5; _key2 < _len2; _key2++) {\n      rest[_key2 - 5] = arguments[_key2];\n    }\n\n    var originalResult = originalInstanceOf.apply(undefined, [props, propName, componentName, location, propFullName].concat(rest));\n\n    if (originalResult !== null) {\n      var locationName = _ReactPropTypeLocationNames2.default[location];\n      var expectedClassName = expectedClass.name || expectedClass.displayName || ANONYMOUS;\n      var actualClassName = getClassName(props[propName]);\n      return new _PropTypeError2.default('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));\n    }\n\n    return originalResult;\n  }\n\n  var typeChecker = createChainableTypeChecker(validate);\n\n  var _type = '' + (expectedClass.displayName || expectedClass.name || expectedClass._type || expectedClass);\n\n  typeChecker.toString = function () {\n    return '```' + ' ' + _type + ' ' + '```';\n  };\n\n  typeChecker.isRequired.toString = function () {\n    return typeChecker.toString() + ' *' + '```' + ' required ' + '```' + '*';\n  };\n\n  typeChecker.displayName = _type;\n  typeChecker.isRequired.displayName = _type;\n  return typeChecker;\n}\n\nmodule.exports = createInstanceTypeChecker;","map":null,"metadata":{},"sourceType":"script"}