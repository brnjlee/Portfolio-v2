{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _class, _temp;\n\nvar _invariant = require('fbjs/lib/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _emptyFunction = require('fbjs/lib/emptyFunction');\n\nvar _emptyFunction2 = _interopRequireDefault(_emptyFunction);\n\nvar _flattenChildren = require('react/lib/flattenChildren');\n\nvar _flattenChildren2 = _interopRequireDefault(_flattenChildren);\n\nvar _ReactCurrentOwner = require('react/lib/ReactCurrentOwner');\n\nvar _ReactCurrentOwner2 = _interopRequireDefault(_ReactCurrentOwner);\n\nvar _ReactElement = require('react/lib/ReactElement');\n\nvar _ReactElement2 = _interopRequireDefault(_ReactElement);\n\nvar _ReactInstrumentation = require('react-dom/lib/ReactInstrumentation');\n\nvar _ReactInstrumentation2 = _interopRequireDefault(_ReactInstrumentation);\n\nvar _ReactReconciler = require('react-dom/lib/ReactReconciler');\n\nvar _ReactReconciler2 = _interopRequireDefault(_ReactReconciler);\n\nvar _ReactMultiChild = require('react-dom/lib/ReactMultiChild');\n\nvar _ReactMultiChild2 = _interopRequireDefault(_ReactMultiChild);\n\nvar _ReactRef = require('react-dom/lib/ReactRef');\n\nvar _ReactRef2 = _interopRequireDefault(_ReactRef);\n\nvar _React3ComponentFlags = require('./React3ComponentFlags');\n\nvar _React3ComponentFlags2 = _interopRequireDefault(_React3ComponentFlags);\n\nvar _idPropertyName = require('./utils/idPropertyName');\n\nvar _idPropertyName2 = _interopRequireDefault(_idPropertyName);\n\nvar _React3CompositeComponentWrapper = require('./React3CompositeComponentWrapper');\n\nvar _React3CompositeComponentWrapper2 = _interopRequireDefault(_React3CompositeComponentWrapper);\n\nvar _React3ComponentTree = require('./React3ComponentTree');\n\nvar _React3ComponentTree2 = _interopRequireDefault(_React3ComponentTree);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction processChildContext(context) {\n  return context;\n}\n\nvar RemountTrigger = function RemountTrigger() {\n  var _this = this;\n\n  _classCallCheck(this, RemountTrigger);\n\n  this.wantRemount = false;\n\n  this.onTrigger = function onTrigger() {};\n\n  this.trigger = function () {\n    _this.wantRemount = true;\n\n    _this.onTrigger();\n  };\n};\n\nvar registrationNameModules = {};\n\nfunction deleteListener(rootNodeID, propKey) {\n  console.log('deleteListener', rootNodeID, propKey); // eslint-disable-line\n\n  debugger; // eslint-disable-line\n}\n\nfunction enqueuePutListener(rootNodeID, propKey, nextProp, transaction) {\n  console.log('enqueuePutListener', rootNodeID, propKey, nextProp, transaction); // eslint-disable-line\n\n  debugger; // eslint-disable-line\n}\n\nfunction _arrayMove(array, oldIndex, newIndex) {\n  array.splice(newIndex, 0, array.splice(oldIndex, 1)[0]);\n}\n\nvar setChildrenForInstrumentation = _emptyFunction2.default;\nvar setContentChildForInstrumentation = _emptyFunction2.default;\nvar getDebugID = void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  /* eslint-disable global-require */\n  var ReactInstanceMap = require('react-dom/lib/ReactInstanceMap');\n  /* eslint-enable global-require */\n\n\n  getDebugID = function _(inst) {\n    if (!inst._debugID) {\n      // Check for ART-like instances. TODO: This is silly/gross.\n      var internal = ReactInstanceMap.get(inst);\n\n      if (internal) {\n        return internal._debugID;\n      }\n    }\n\n    return inst._debugID;\n  };\n\n  setChildrenForInstrumentation = function _(children) {\n    _ReactInstrumentation2.default.debugTool.onSetChildren(this._debugID, children ? Object.keys(children).map(function (key) {\n      return children[key]._debugID;\n    }) : []);\n  };\n\n  setContentChildForInstrumentation = function _(content) {\n    var hasExistingContent = this._contentDebugID !== null && this._contentDebugID !== undefined;\n    var debugID = this._debugID; // This ID represents the inlined child that has no backing instance:\n\n    var contentDebugID = 'CDID-' + debugID;\n\n    if (content == null) {\n      if (hasExistingContent) {\n        _ReactInstrumentation2.default.debugTool.onUnmountComponent(this._contentDebugID);\n      }\n\n      this._contentDebugID = null;\n      return;\n    }\n\n    this._contentDebugID = contentDebugID;\n\n    if (hasExistingContent) {\n      _ReactInstrumentation2.default.debugTool.onBeforeUpdateComponent(contentDebugID, content);\n\n      _ReactInstrumentation2.default.debugTool.onUpdateComponent(contentDebugID);\n    } else {\n      _ReactInstrumentation2.default.debugTool.onBeforeMountComponent(contentDebugID, content, debugID);\n\n      _ReactInstrumentation2.default.debugTool.onMountComponent(contentDebugID);\n\n      _ReactInstrumentation2.default.debugTool.onSetChildren(debugID, [contentDebugID]);\n    }\n  };\n}\n\nvar getThreeObjectFromMountImage = function getThreeObjectFromMountImage(img) {\n  return img.threeObject;\n};\n\nvar ReactMultiChildMixin = _ReactMultiChild2.default.Mixin; // TODO sync ReactDOMComponent\n\nvar InternalComponent = (_temp = _class = function () {\n  function InternalComponent(element, react3RendererInstance) {\n    var _this2 = this;\n\n    _classCallCheck(this, InternalComponent);\n\n    this.updateChildren = ReactMultiChildMixin.updateChildren.bind(this);\n    this._mountChildAtIndex = ReactMultiChildMixin._mountChildAtIndex.bind(this);\n    this._unmountChild = ReactMultiChildMixin._unmountChild.bind(this);\n    this.unmountChildren = ReactMultiChildMixin.unmountChildren.bind(this);\n    this._currentElement = element;\n    /**\r\n     * @type React3Renderer\r\n     */\n\n    this._react3RendererInstance = react3RendererInstance;\n    this._elementType = element.type; // _tag\n\n    this._renderedChildren = [];\n    this._hostMarkup = null; // _hostNode\n\n    this._hostParent = null;\n    this._rootNodeID = 0;\n    this._hostID = 0; // _domID\n\n    this._hostContainerInfo = null;\n    this._threeObject = null;\n    this._topLevelWrapper = null;\n    this._markup = null;\n    this._nodeWithLegacyProperties = null;\n    this._forceRemountOfComponent = false;\n    this._flags = 0;\n\n    if (process.env.NODE_ENV !== 'production') {\n      this._ancestorInfo = null;\n      setContentChildForInstrumentation.call(this, null);\n    }\n\n    this.threeElementDescriptor = react3RendererInstance.threeElementDescriptors[element.type];\n\n    if (!this.threeElementDescriptor) {\n      if (process.env.NODE_ENV !== 'production') {\n        (0, _invariant2.default)(false, 'No constructor for ' + element.type);\n      } else {\n        (0, _invariant2.default)(false);\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production' || process.env.ENABLE_REACT_ADDON_HOOKS === 'true') {\n      this.highlightComponent = function () {\n        _this2.threeElementDescriptor.highlight(_this2._threeObject);\n      };\n\n      this.hideHighlight = function () {\n        _this2.threeElementDescriptor.hideHighlight(_this2._threeObject);\n      };\n    }\n\n    this.remountTrigger = new RemountTrigger();\n\n    this.remountTrigger.onTrigger = function () {\n      _this2._forceRemountOfComponent = true;\n    };\n  }\n\n  _createClass(InternalComponent, [{\n    key: 'getHostMarkup',\n    value: function getHostMarkup() {\n      return this._markup;\n    }\n  }, {\n    key: 'getHostNode',\n    value: function getHostNode() {\n      // console.warn('host node?'); // eslint-disable-line no-console\n      return this._markup;\n    }\n    /**\r\n     * Generates root tag markup then recurses. This method has side effects and\r\n     * is not idempotent.\r\n     *\r\n     * @internal\r\n     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\r\n     * @param {?InternalComponent} hostParent the containing DOM component instance\r\n     * @param {?React3ContainerInfo} hostContainerInfo info about the host container\r\n     * @param {object} context\r\n     * @return {object} The computed markup.\r\n     */\n\n  }, {\n    key: 'mountComponent',\n    value: function mountComponent(transaction, hostParent, hostContainerInfo, context) {\n      var _markup;\n\n      this._rootNodeID = this._react3RendererInstance.globalIdCounter++;\n      this._hostID = hostContainerInfo._idCounter++;\n      this._hostParent = hostParent;\n      this._hostContainerInfo = hostContainerInfo;\n      var element = this._currentElement;\n\n      if (process.env.NODE_ENV !== 'production') {\n        this.threeElementDescriptor.checkPropTypes(element, this._currentElement._owner, this._debugID, element.props);\n      }\n\n      this._threeObject = this.threeElementDescriptor.construct(element.props);\n      this.threeElementDescriptor.applyInitialProps(this._threeObject, element.props);\n      this.threeElementDescriptor.placeRemountTrigger(this._threeObject, this.remountTrigger.trigger); // create initial children\n\n      var childrenToUse = element.props.children;\n      var mountImages = void 0;\n\n      if (childrenToUse) {\n        mountImages = this.mountChildren(childrenToUse, transaction, context);\n      } else {\n        mountImages = [];\n      }\n\n      var markup = (_markup = {}, _defineProperty(_markup, _idPropertyName2.default, this._hostID), _defineProperty(_markup, '_rootInstance', null), _defineProperty(_markup, 'elementType', element.type), _defineProperty(_markup, 'threeObject', this._threeObject), _defineProperty(_markup, 'parentMarkup', null), _defineProperty(_markup, 'childrenMarkup', mountImages), _defineProperty(_markup, 'toJSON', function toJSON() {\n        return '---MARKUP---';\n      }), _markup);\n\n      if (process.env.NODE_ENV !== 'production') {\n        (0, _invariant2.default)(!!this._threeObject.userData, 'No userdata present in threeobject for %s', element.type);\n      } else {\n        (0, _invariant2.default)(!!this._threeObject.userData);\n      }\n\n      Object.assign(this._threeObject.userData, {\n        object3D: this._threeObject,\n        react3internalComponent: this,\n        // used for highlighting etc\n        toJSON: function toJSON() {\n          return '---USERDATA---';\n        },\n        markup: markup\n      });\n      var threeElementDescriptors = this._react3RendererInstance.threeElementDescriptors;\n\n      if (mountImages && mountImages.length > 0) {\n        this.threeElementDescriptor.addChildren(this._threeObject, mountImages.map(getThreeObjectFromMountImage));\n\n        for (var i = 0; i < mountImages.length; ++i) {\n          var mountImage = mountImages[i];\n          var descriptorForChild = threeElementDescriptors[mountImage.elementType];\n          mountImage.parentMarkup = markup;\n          descriptorForChild.setParent(mountImage.threeObject, this._threeObject);\n        }\n      }\n\n      this._markup = markup;\n\n      _React3ComponentTree2.default.precacheMarkup(this, this._markup);\n\n      this._flags |= _React3ComponentFlags2.default.hasCachedChildMarkups;\n      return markup;\n    }\n    /**\r\n     * @see ReactMultiChild._reconcilerInstantiateChildren\r\n     * Cloned because it uses\r\n     * @see React3Renderer.instantiateChildren\r\n     *\r\n     * @param nestedChildren\r\n     * @param transaction\r\n     * @param context\r\n     * @returns {*}\r\n     * @private\r\n     */\n\n  }, {\n    key: '_reconcilerInstantiateChildren',\n    value: function _reconcilerInstantiateChildren(nestedChildren, transaction, context) {\n      if (process.env.NODE_ENV !== 'production') {\n        var selfDebugID = getDebugID(this);\n\n        if (this._currentElement) {\n          var previousCurrent = _ReactCurrentOwner2.default.current;\n\n          try {\n            _ReactCurrentOwner2.default.current = this._currentElement._owner;\n            return this._react3RendererInstance.instantiateChildren(nestedChildren, transaction, context, selfDebugID);\n          } finally {\n            _ReactCurrentOwner2.default.current = previousCurrent;\n          }\n        }\n      }\n\n      return this._react3RendererInstance.instantiateChildren(nestedChildren, transaction, context, 0);\n    }\n    /**\r\n     * @see ReactMultiChild._reconcilerUpdateChildren\r\n     * Cloned because it uses\r\n     * @see React3Renderer.updateChildren\r\n     *\r\n     * @param prevChildren\r\n     * @param nextNestedChildrenElements\r\n     * @param mountImages\r\n     * @param removedMarkups\r\n     * @param transaction\r\n     * @param context\r\n     * @returns {?Object}\r\n     * @private\r\n     */\n\n  }, {\n    key: '_reconcilerUpdateChildren',\n    value: function _reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedMarkups, transaction, context) {\n      var nextChildren = void 0;\n      var selfDebugID = 0;\n\n      if (process.env.NODE_ENV !== 'production') {\n        selfDebugID = getDebugID(this);\n\n        if (this._currentElement) {\n          var previousCurrent = _ReactCurrentOwner2.default.current;\n\n          try {\n            _ReactCurrentOwner2.default.current = this._currentElement._owner;\n            nextChildren = (0, _flattenChildren2.default)(nextNestedChildrenElements, selfDebugID);\n          } finally {\n            _ReactCurrentOwner2.default.current = previousCurrent;\n          }\n\n          this._react3RendererInstance.updateChildren(prevChildren, nextChildren, mountImages, removedMarkups, transaction, this, this._hostContainerInfo, context, selfDebugID);\n\n          return nextChildren;\n        }\n      }\n\n      nextChildren = (0, _flattenChildren2.default)(nextNestedChildrenElements, selfDebugID);\n\n      this._react3RendererInstance.updateChildren(prevChildren, nextChildren, mountImages, removedMarkups, transaction, this, this._hostContainerInfo, context, selfDebugID);\n\n      return nextChildren;\n    }\n    /**\r\n     * @see ReactMultiChild.mountChildren\r\n     *\r\n     * Generates a \"mount image\" for each of the supplied children. In the case\r\n     * of `ReactDOMComponent`, a mount image is a string of markup.\r\n     *\r\n     * @param {?object} nestedChildren Nested child maps.\r\n     * @param transaction\r\n     * @param context\r\n     * @return {array} An array of mounted representations.\r\n     * @internal\r\n     */\n\n  }, {\n    key: 'mountChildren',\n    value: function mountChildren(nestedChildren, transaction, context) {\n      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);\n\n      this._renderedChildren = children;\n      var mountImages = [];\n      var index = 0;\n\n      if (children) {\n        var childrenNames = Object.keys(children);\n\n        for (var i = 0; i < childrenNames.length; ++i) {\n          var name = childrenNames[i];\n          var child = children[name];\n          var selfDebugID = 0;\n\n          if (process.env.NODE_ENV !== 'production') {\n            selfDebugID = getDebugID(this);\n          }\n\n          var mountImage = _ReactReconciler2.default.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID); // const mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);\n\n\n          child._mountIndex = index;\n          mountImages.push(mountImage);\n          index++;\n        }\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        setChildrenForInstrumentation.call(this, children);\n      }\n\n      return mountImages;\n    }\n  }, {\n    key: 'moveChild',\n    value: function moveChild(child, toIndex, lastIndex) {\n      if (child._mountIndex === toIndex) {\n        return;\n      }\n\n      this.threeElementDescriptor.moveChild(this._threeObject, child._threeObject, toIndex, child._mountIndex);\n      var markup = this._markup;\n\n      _arrayMove(markup.childrenMarkup, lastIndex, toIndex);\n    }\n  }, {\n    key: 'receiveComponent',\n    value: function receiveComponent(nextElement, transaction, context) {\n      // console.log('receive component');\n      var prevElement = this._currentElement;\n      this._currentElement = nextElement;\n      this.updateComponent(transaction, prevElement, nextElement, context);\n\n      if (this._forceRemountOfComponent) {\n        this._currentElement = null;\n      }\n    }\n    /**\r\n     * @see ReactDOMComponent.updateComponent\r\n     *\r\n     * Updates a DOM component after it has already been allocated and\r\n     * attached to the DOM. Reconciles the root DOM node, then recurses.\r\n     *\r\n     * @param {ReactReconcileTransaction} transaction\r\n     * @param {ReactElement} prevElement\r\n     * @param {ReactElement} nextElement\r\n     * @param context\r\n     * @internal\r\n     * @overridable\r\n     */\n\n  }, {\n    key: 'updateComponent',\n    value: function updateComponent(transaction, prevElement, nextElement, context) {\n      var lastProps = prevElement.props;\n      var nextProps = this._currentElement.props;\n\n      if (prevElement.type !== nextElement.type) {\n        if (process.env.NODE_ENV !== 'production') {\n          (0, _invariant2.default)(false, 'The component type changed unexpectedly');\n        } else {\n          (0, _invariant2.default)(false);\n        }\n      }\n\n      this._updateObjectProperties(lastProps, nextProps, transaction, context);\n\n      if (!this._forceRemountOfComponent) {\n        this._updateChildrenObjects(nextProps, transaction, processChildContext(context, this));\n      }\n    } // see _updateDOMChildren\n\n  }, {\n    key: '_updateChildrenObjects',\n    value: function _updateChildrenObjects(nextProps, transaction, context) {\n      var nextChildren = nextProps.children || null;\n\n      if (process.env.NODE_ENV !== 'production') {\n        setContentChildForInstrumentation.call(this, null);\n      }\n\n      this.updateChildren(nextChildren, transaction, context);\n    } // original: _updateDOMProperties\n\n  }, {\n    key: '_updateObjectProperties',\n    value: function _updateObjectProperties(lastProps, nextProps, transaction) {\n      var remountTrigger = this.remountTrigger;\n      remountTrigger.wantRemount = false;\n      this.threeElementDescriptor.beginPropertyUpdates(this._threeObject, nextProps);\n\n      if (process.env.NODE_ENV !== 'production') {\n        this.threeElementDescriptor.checkPropTypes(this._currentElement, this._currentElement._owner, this._debugID, nextProps);\n      }\n\n      var lastPropKeys = Object.keys(lastProps); // https://jsperf.com/object-keys-vs-for-in-with-closure/3\n\n      for (var i = 0; i < lastPropKeys.length; ++i) {\n        var propKey = lastPropKeys[i];\n\n        if (nextProps.hasOwnProperty(propKey)) {\n          continue;\n        }\n\n        if (propKey === 'children') {\n          continue;\n        }\n\n        if (remountTrigger.wantRemount) {\n          break;\n        }\n\n        if (registrationNameModules.hasOwnProperty(propKey)) {\n          if (lastProps[propKey]) {\n            // Only call deleteListener if there was a listener previously or\n            // else willDeleteListener gets called when there wasn't actually a\n            // listener (e.g., onClick={null})\n            deleteListener(this._rootNodeID, propKey);\n          }\n        } else {\n          this.threeElementDescriptor.deleteProperty(this._threeObject, propKey);\n        }\n      }\n\n      var nextPropKeys = Object.keys(nextProps);\n\n      for (var _i = 0; _i < nextPropKeys.length; ++_i) {\n        var _propKey = nextPropKeys[_i];\n\n        if (_propKey === 'children') {\n          continue;\n        }\n\n        if (remountTrigger.wantRemount) {\n          break;\n        }\n\n        var nextProp = nextProps[_propKey];\n        var lastProp = lastProps[_propKey];\n\n        if (nextProp === lastProp) {\n          continue;\n        }\n\n        if (registrationNameModules.hasOwnProperty(_propKey)) {\n          if (nextProp) {\n            enqueuePutListener(this._rootNodeID, _propKey, nextProp, transaction);\n          } else if (lastProp) {\n            deleteListener(this._rootNodeID, _propKey);\n          }\n        } else {\n          this.threeElementDescriptor.updateProperty(this._threeObject, _propKey, nextProp);\n        }\n      }\n\n      this.threeElementDescriptor.completePropertyUpdates(this._threeObject);\n    }\n  }, {\n    key: '_removeAllChildRefs',\n    value: function _removeAllChildRefs() {\n      var renderedChildren = this._renderedChildren;\n\n      if (renderedChildren) {\n        var renderedChildrenKeys = Object.keys(renderedChildren);\n\n        for (var i = 0; i < renderedChildrenKeys.length; ++i) {\n          var name = renderedChildrenKeys[i];\n          var renderedChild = renderedChildren[name];\n\n          if (renderedChild && renderedChild._currentElement && renderedChild._currentElement.ref) {\n            _ReactRef2.default.detachRefs(renderedChild, renderedChild._currentElement);\n\n            renderedChild._currentElement = _ReactElement2.default.cloneElement(renderedChild._currentElement, {\n              ref: null\n            });\n          }\n\n          renderedChild._removeAllChildRefs();\n        }\n      }\n    }\n    /**\r\n     * @see ReactDOMComponent.Mixin.unmountComponent\r\n     */\n\n  }, {\n    key: 'unmountComponent',\n    value: function unmountComponent(safely) {\n      if (this._threeObject !== null) {\n        this.threeElementDescriptor.componentWillUnmount(this._threeObject);\n      }\n\n      if (this._forceRemountOfComponent) {\n        this._removeAllChildRefs(); // prevent attaching of refs to children\n\n      }\n\n      this.unmountChildren(safely);\n\n      _React3ComponentTree2.default.uncacheMarkup(this);\n\n      if (this._threeObject !== null) {\n        this.threeElementDescriptor.unmount(this._threeObject); // delete this._threeObject.userData.markup;\n      }\n\n      this._markup = null;\n      this._rootNodeID = 0;\n\n      if (this._nodeWithLegacyProperties) {\n        var node = this._nodeWithLegacyProperties;\n        node._reactInternalComponent = null;\n        this._nodeWithLegacyProperties = null;\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        setContentChildForInstrumentation.call(this, null);\n      }\n    }\n  }, {\n    key: 'emptyJson',\n    value: function emptyJson() {\n      debugger; // eslint-disable-line\n\n      return '...';\n    }\n  }, {\n    key: 'getPublicInstance',\n    value: function getPublicInstance() {\n      return this._markup.threeObject;\n    }\n    /**\r\n     * @see ReactMultiChildMixin._updateChildren\r\n     *\r\n     * Improve performance by isolating this hot code path from the try/catch\r\n     * block in `updateChildren`.\r\n     *\r\n     * @param {?object} nextNestedChildrenElements Nested child maps.\r\n     * @param {ReactReconcileTransaction} transaction\r\n     * @param {any} context\r\n     * @final\r\n     * @protected\r\n     */\n\n  }, {\n    key: '_updateChildren',\n    value: function _updateChildren(nextNestedChildrenElements, transaction, context) {\n      var prevChildren = this._renderedChildren;\n      var removedMarkups = {};\n      var mountImages = [];\n\n      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedMarkups, transaction, context);\n\n      if (!nextChildren && !prevChildren) {\n        return;\n      }\n\n      var remountTrigger = this.remountTrigger;\n      remountTrigger.wantRemount = false;\n      this.threeElementDescriptor.beginChildUpdates(this._threeObject); // `nextIndex` will increment for each child in `nextChildren`, but\n      // `lastIndex` will be the last index visited in `prevChildren`.\n\n      var nextIndex = 0;\n      var lastIndex = 0; // `nextMountIndex` will increment for each newly mounted child.\n\n      var nextMountIndex = 0;\n\n      if (nextChildren) {\n        var nextChildrenNames = Object.keys(nextChildren);\n\n        for (var i = 0; i < nextChildrenNames.length; ++i) {\n          var childName = nextChildrenNames[i];\n\n          if (remountTrigger.wantRemount) {\n            // This component will be remounted, (see extrude geometry)\n            // No need to update children any more as they will also be remounted!\n            continue;\n          }\n\n          var prevChild = prevChildren && prevChildren[childName];\n          var nextChild = nextChildren[childName];\n\n          if (prevChild === nextChild) {\n            this.moveChild(prevChild, nextIndex, lastIndex);\n            lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n            prevChild._mountIndex = nextIndex;\n          } else {\n            if (prevChild) {\n              // Update `lastIndex` before `_mountIndex` gets unset by unmounting.\n              lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n              var removedChildMarkup = removedMarkups[childName]; // handle removal here to allow replacing of components that are expected to be present\n              // only once in the parent\n\n              (0, _invariant2.default)(!!removedChildMarkup, 'Removed markup map should contain this child');\n              delete removedMarkups[childName];\n\n              this._unmountChild(prevChild, removedChildMarkup);\n            }\n\n            if (!remountTrigger.wantRemount) {\n              // The remount can be triggered by unmountChild as well (see extrude geometry)\n              // The child must be instantiated before it's mounted.\n              this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], null, nextIndex, transaction, context);\n\n              nextMountIndex++;\n            }\n          }\n\n          nextIndex++;\n        }\n      }\n\n      var removedMarkupNames = Object.keys(removedMarkups);\n\n      for (var _i2 = 0; _i2 < removedMarkupNames.length; ++_i2) {\n        var removedMarkupName = removedMarkupNames[_i2];\n\n        this._unmountChild(prevChildren[removedMarkupName], removedMarkups[removedMarkupName]);\n      }\n\n      this._renderedChildren = nextChildren;\n\n      if (process.env.NODE_ENV !== 'production') {\n        setChildrenForInstrumentation.call(this, nextChildren);\n      }\n\n      this.threeElementDescriptor.completeChildUpdates(this._threeObject);\n    } // afterNode unused\n\n  }, {\n    key: 'createChild',\n    value: function createChild(child, afterNode, mountImage) {\n      var mountIndex = child._mountIndex;\n\n      this._markup.childrenMarkup.splice(mountIndex, 0, mountImage);\n\n      mountImage.parentMarkup = this._markup;\n      this.threeElementDescriptor.addChild(this._threeObject, mountImage.threeObject, mountIndex);\n      var descriptorForChild = this._react3RendererInstance.threeElementDescriptors[mountImage.elementType];\n      descriptorForChild.setParent(mountImage.threeObject, this._threeObject);\n    }\n    /**\r\n     * Removes a child component.\r\n     *\r\n     * @param {ReactComponent} child Child to remove.\r\n     * @param {*} markup The markup for the child.\r\n     * @protected\r\n     */\n\n  }, {\n    key: 'removeChild',\n    value: function removeChild(child, markup) {\n      // eslint-disable-line no-unused-vars\n      if (process.env.NODE_ENV !== 'production') {\n        (0, _invariant2.default)(!!markup && !!markup.threeObject, 'The child markup to replace has no threeObject');\n      }\n\n      this.threeElementDescriptor.removeChild(this._threeObject, markup.threeObject);\n\n      if (child instanceof InternalComponent) {\n        child.threeElementDescriptor.removedFromParent(markup.threeObject);\n      } else if (child instanceof _React3CompositeComponentWrapper2.default) {\n        markup.threeObject.userData.react3internalComponent.threeElementDescriptor.removedFromParent(markup.threeObject);\n      } else if (process.env.NODE_ENV !== 'production') {\n        (0, _invariant2.default)(false, 'Cannot remove child because it is not a known component type');\n      } else {\n        (0, _invariant2.default)(false);\n      }\n\n      var childrenMarkup = this._markup.childrenMarkup;\n\n      for (var i = 0; i < childrenMarkup.length; i++) {\n        var childMarkup = childrenMarkup[i];\n\n        if (childMarkup.threeObject === markup.threeObject) {\n          childrenMarkup.splice(i, 1);\n          delete childMarkup.parentMarkup;\n          return;\n        }\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        (0, _invariant2.default)(false, 'Trying to remove a child that is not mounted');\n      } else {\n        (0, _invariant2.default)(false);\n      }\n    }\n  }]);\n\n  return InternalComponent;\n}(), _class.displayName = 'React3Component', _temp);\nmodule.exports = InternalComponent;","map":null,"metadata":{},"sourceType":"script"}